{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-7ba5bd90\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"threeContainer\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"100vh\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["ref","style","_createElementBlock","_createElementVNode","_hoisted_1"],"sources":["/home/ramon/repositorios/hatedinthenation/src/App.vue"],"sourcesContent":["<template>\n  <div>\n      <div ref=\"threeContainer\" style=\"width: 100%; height: 100vh;\"></div>\n  </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { PointLight } from 'three';\n\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\nexport default {\nname: 'ThreeComponent',\nmounted() {\n  const container = this.$refs.threeContainer;\n  if (!container) {\n    console.error('Element with ref \"threeContainer\" not found');\n    return;\n  }\n\n  const renderer = new THREE.WebGLRenderer();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  container.appendChild(renderer.domElement);\n\n  const scene = new THREE.Scene();\n  scene.background = new THREE.Color(0xdddddd);\n\n  const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 2000);\n  camera.rotation.y = (45 / 100) * Math.PI;\n  camera.position.x = 800;\n  camera.position.y = 100;\n  camera.position.z = 1000;\n\n  const controls = new OrbitControls(camera, renderer.domElement);\n  controls.update();\n\n  // Adicionando luzes à cena\n  const light1 = new PointLight(0xc4c4c4, 500000);\n  light1.position.set(0, 300, 500);\n  scene.add(light1);\n\n  const light2 = new PointLight(0xc4c4c4, 500000);\n  light2.position.set(500, 100, 0);\n  scene.add(light2);\n\n  const light3 = new PointLight(0xc4c4c4, 500000);\n  light3.position.set(0, 100, -500);\n  scene.add(light3);\n\n  const light4 = new PointLight(0xc4c4c4, 50000);\n  light4.position.set(-500, 300, 500);\n  scene.add(light4);\n\n // Carregando o modelo GLTF\n  const gltfLoader = new GLTFLoader();\n  gltfLoader.load('/assets/bee_gltf.glb', (gltf) => {\n    const model = gltf.scene;\n    model.scale.set(150, 150, 150); // Defina a escala do objeto\n    model.position.y = -50;\n    scene.add(model);\n\n    if (gltf.animations && gltf.animations.length > 0) {\n      console.log('Animações encontradas:', gltf.animations);\n\n      // Adicionando animação\n      const mixer = new THREE.AnimationMixer(model);\n      gltf.animations.forEach((clip) => {\n        mixer.clipAction(clip).play();\n      });\n\n      const animate = () => {\n        requestAnimationFrame(animate);\n        controls.update();\n        mixer.update(0.01); // Atualize a animação\n        renderer.render(scene, camera);\n      };\n\n      animate();\n    } else {\n      console.log('Nenhuma animação encontrada no modelo.');\n    }\n  });\n  window.addEventListener('resize', onWindowResize, false);\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n}\n};\n</script>\n\n<style scoped>\ndiv {\n  width: 100%;\n  height: 100%;\n}\n</style>\n"],"mappings":";;;EAEWA,GAAG,EAAC,gBAAgB;EAACC,KAAmC,EAAnC;IAAA;IAAA;EAAA;;;uBAD9BC,mBAAA,CAEM,cADFC,mBAAA,CAAoE,OAApEC,UAAoE,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}